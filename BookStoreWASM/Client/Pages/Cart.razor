@page "/cart"
@using BookStoreWASM.Shared
@using Blazored.LocalStorage
@inject ISyncLocalStorageService LocalStorage
@inject ILocalStorageService asyncLocalStorage
@inject IToastService ToastService
<PageTitle>Cart</PageTitle>

<h3>Hello, @CurrentUser.Identity.Name! This is your cart!</h3>
<br />


<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Title</th>
            <th>Author</th>
            <th>Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody style="font-size:24px">
        @foreach (var item in cart)
        {
            <tr>
                <td>
                    <input type="checkbox" @onchange = "eventArgs => {CheckBoxClicked(item,eventArgs.Value);}" />
                </td>
                <td class="align-center">
                    <img src=@item.CoverLink style="max-height:200px;max-width:78px">
                </td>
                <td class ="align-center">@item.Title</td>
                <td class ="align-center">@item.Author</td>
                <td class ="align-center">@item.Price лв.</td>
                <td>
                    <button class="btn btn-outline-warning" @onclick="() => RemoveFromCart(item)">X</button>
                </td>
                <td></td>
            </tr>
        }
        <tr style="font-size:30px">
            <td></td>
            <td></td>
            <td></td>
            <td>Total: </td>
            <td><strong>@CalcTotal() лв.</strong></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td>
                <button class="btn btn-primary" @onclick="Order">Order</button>
            </td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    List<BookDTO> cart = new();
    List<BookDTO> order = new();

    public string text;

    private decimal CalcTotal()
    {
        decimal total = 0;
        foreach (var item in order)
        {
            total += item.Price;
        }
        return total;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        CurrentUser = user;
        var result = LocalStorage.GetItem<List<BookDTO>>("cart " + CurrentUser.Identity.Name);
        if (result != null)
        {
            cart = result;
        }
    }

    void CheckBoxClicked(BookDTO book,object checkedValue)
    {
        if((bool)checkedValue)
        {
            if(!order.Contains(book))
            {
                order.Add(book);
            }
        }
        else
        {
            if(order.Contains(book))
            {
                order.Remove(book);
            }
        }
    }

    void Order()
    {
        foreach(var item in order)
        {
            RemoveFromCart(item);    
        }
        ToastService.ShowSuccess("Order has been completed and shipped!");
    }

    private async void RemoveFromCart(BookDTO book)
    {
        cart.Remove(book);
        await asyncLocalStorage.SetItemAsync("cart " + CurrentUser.Identity.Name, cart);
    }
}
